; Custom loader. When loaded at address 40E000 and started via startRoutineByLocalIdentifier 0x02,
; it will accept several custom KWP2000-like commands via the K-Line to allow dumping the EEPROM
; and other special functions.

; The following Linux command will convert the Intel Hex-86 format output to raw binary:
; srec_cat Loader.H86 -Intel -Output Loader.bin -Binary

$M167
$NOLI
$INCLUDE (REG167.INC)
$LI

All		SECTION CODE AT 0E000H
		DB		0A5H, 0A5H, 14H, 0E0H, 00H, 00H, 3CH, 0E0H
		DB		00H, 00H
		DW		RoutineStart
		DB		00H, 00H
		DW		RoutineEnd
		DB		00H, 00H, 02H, 47H, 13H, 00H, 00H, 01H
		DB		00H, 02H, 00H, 03H, 00H, 04H, 00H, 05H
		DB		00H, 06H, 00H, 07H, 00H, 08H, 00H, 09H
		DB		00H, 0AH, 00H, 0BH, 00H, 0CH, 00H, 0DH
		DB		00H, 0EH, 00H, 0FH, 80H, 0FH, 0A0H, 0FH
		DB		0C0H, 0FH, 00H, 10H, 45H, 2FH, 7DH, 64H
		DB		9BH, 0C3H

; Entry
RoutineStart	PROC FAR
		BCLR	IEN			; Disable interrupts
		BSET    S0REN		; Receiver enabled
		MOV		R0,#0E7FEH	; "SP"
		
		; Receive and dispatch message
E04A:	CALL    E128	; Receive message

		CMP     R6,#1		; Timeout?
		JMPR    CC_Z,E0C6

		CMP     R6,#2 ; Bad checksum?
		JMPR    CC_Z,E082 ; Send NAK
		
		MOV     R1,#0E600H ; Receive buffer
		MOVB    RL2,[R1+#0001H] ; Service => RL2
		
		CMPB    RL2,#0023H ; 23: Read flash
		JMPR    CC_Z,Cmd23

		CMPB    RL2,#0036H ; 36: Program flash
		JMPR    CC_Z,Cmd36
		
		CMPB    RL2,#00A2H ; A2: Reboot
		JMPR    CC_Z,CmdA2
		
		CMPB    RL2,#00A3H ; A3: Respond with 0x55
		JMPR    CC_Z,CmdA3

		CMPB    RL2,#00A4H ; A4: Set baud rate
		JMPR    CC_Z,CmdA4
	
		CMPB    RL2,#00A5H ; A5: Erase flash
		JMPR    CC_Z,CmdA5
		
		CMPB    RL2,#00A6H ; A6: Dump EEPROM
		JMPR    CC_Z,CmdA6

		CMPB    RL2,#00A7H ; A7: Write 1 byte to EEPROM (Page 0)
		JMPR    CC_Z,CmdA7

		CMPB    RL2,#00A8H ; A8: Write 1 byte to EEPROM (Page 1)
		JMPR    CC_Z,CmdA8

E082:	CALL   	SendNAK
		JMPR    CC_UC,E04A ; Receive and dispatch message

; Read flash
Cmd23:	CALL    E23E
		JMPR    CC_UC,E04A ; Receive and dispatch message

; Program flash
Cmd36:	CALL    E1C4 ; Program flash
Cmd36x:	CALL    SendAck ; Send ACK
		JMPR    CC_UC,E04A ; Receive and dispatch message

; Reboot
CmdA2:	CALL	SendACK
		CALL   	DELAY256
		MOVB    RL7,#0055H
		CALL	XmitRL7
		SRST    ; Reboot

; Respond with 0x55
CmdA3:	MOVB    RL7,#0055H
CmdA3x:	CALL    XmitRL7
		JMPR    CC_UC,E04A ; Receive and dispatch message

; Set baud rate (buf[2] => S0BG)
CmdA4:	CALL    SendACK
		CALL    Delay256
		MOV     R2,#00H
		MOVB    RL2,[R1+#0002H]
		MOV     S0BG,R2
		MOVB    RL7,#00AAH
		JMPR    CC_UC,CmdA3x ; XmitRL7 + jump to dispatcher

; Erase flash
CmdA5:	CALL    SendACK
		CALL    E2E6 ; Erase flash
		JMPR    CC_UC,Cmd36x ; SendACK + jump to dispatcher

; Dump EEPROM
CmdA6:	CALL	SendACK
		CALL   	E1C6 ; Dump EEPROM
		JMPR    CC_UC,Cmd36x ; SendACK + jump to dispatcher

; Write 1 byte to EEPROM (Page 0)
CmdA7:	CALL	SendACK
		CALL   	E324 ; Write 1 byte to EEPROM (Page 0)
		JMPR    CC_UC,Cmd36x ; SendACK + jump to dispatcher

; Write 1 byte to EEPROM (Page 1)
CmdA8:	CALL	SendACK
		CALL    E356
		JMPR    CC_UC,Cmd36x ; SendACK + jump to dispatcher

; Handle timeout?
E0C6:	MOVB    RL7,[R1]
		ADDB    RL7,#1
		JMPR    CC_UC,CmdA3x ; XmitRL7 + jump to dispatcher

RoutineStart	ENDP

; Send NAK
SendNAK	PROC NEAR
		MOV     [-R0],R1 ; Push R1
		MOV     [-R0],R2 ; Push R2
		MOV     R1,#0E600H ; Transmit buf
		MOVB    RL2,#01H ; Length 1
		MOVB    [R1],RL2
		MOVB    RL2,#007FH ; Code 7F (NAK)
		JMPR	CC_UC,SendACK2
SendNAK	ENDP

; Send ACK
SendACK	PROC NEAR
		MOV     [-R0],R1 ; Push R1
		MOV     [-R0],R2 ; Push R2
		MOV     R1,#0E600H ; Transmit buf
		MOVB    RL2,#01H
		MOVB    [R1],RL2
		MOVB    RL2,#0076H ; Code 76 (transferData positive response)
SendACK2:		
		MOVB    [R1+#0001H],RL2
		CALL	E15E ; Send message
		JMPR    CC_UC,E156x ; Pop R2,R1 + RET
SendACK	ENDP

; Receive message into buf (E600) - Status returned in R6 (0: Success, 1: Timeout, 2: Checksum error)
; This code has a bug where it does not initialize R6 to 0 and doesn't call read-with-timeout so 1 will never be returned.
E128	PROC NEAR
		MOV		[-R0],R1 ; Push R1
		MOV     [-R0],R2 ; Push R2
		MOV     [-R0],R3 ; Push R3
		MOV     R1,#0E600H ; Receive buf
		CALL    E192 ; Receive a byte in R7
		MOV     R2,#00H ; 0 => R2
		MOVB    RL2,RL7 ; RL7 => RL2 (RL2 is message length)
		MOVB    RL3,RL7 ; RL7 => RL3 (RL3 is message checksum)
		MOVB    [R1],RL7 ; Put received byte in buf
		ADD     R1,#1 ; Advance to next buf location
E140:	CALL    E1A2 ; Receive a byte in R7. R6: 0 if success, 1 if timeout
		CMP     R6,#0 ; Success?
		JMPR    CC_NZ,E156 ; Return if error
		MOVB    [R1],RL7 ; Put received byte in buf
		ADDB    RL3,RL7 ; RL3 += RL7
		ADD     R1,#1 ; Advance to next buf location
		CMPD1   R2,#00H ; (R2-- == 0)?
		JMPR    CC_NZ,E140 ; Loop if not
		SUBB    RL3,RL7 ; RL3 - RL7 => RL3
		CMPB    RL3,RL7 ; (RL3 == RL7)?
		JMPR    CC_Z,E156 ; Return if true
		MOV     R6,#02H ; Checksum error
E156:	MOV     R3,[R0+] ; Pop R3
E156x:	MOV     R2,[R0+] ; Pop R2
E156y:	MOV     R1,[R0+] ; Pop R1
		RET
E128	ENDP

; Send message in buf (E600)
E15E	PROC NEAR
		MOV		[-R0],R1 ; Push R1
		MOV     [-R0],R2 ; Push R2
		MOV     [-R0],R3 ; Push R3
		MOV     R1,#0E600H ; Transmit buf
		MOV     R2,#00H
		MOVB    RL2,[R1] ; RL2 is length
		MOVB    RL3,#00H ; R3 is checksum
E16E:	MOVB    RL7,[R1+] ; message byte => RL7
		ADDB    RL3,RL7 ; checksum += byte
		CALL    XmitRL7
		CMPD1   R2,#00H
		JMPR    CC_NZ,E16E ; Loop until all characters sent
		MOVB    RL7,RL3 ; checksum => RL7
		CALL    XmitRL7
		JMPR    CC_UC,E156 ; Pop R3,R2,R1 + RET
E15E	ENDP

		; Transmit byte in R7
XmitRL7	PROC NEAR
		MOVB	S0TBUF,RL7	; Transmit RL7
		JMPR	CC_UC,E192x	; Receive echo in R7
XmitRL7	ENDP

		; Receive a byte in R7
E192	PROC NEAR
E192x:
		SRVWDT					; Feed watchdog
		JNB		S0RIR,E192x		; Loop until receive flag set
		MOV     R7,S0RBUF		; R7 = received byte
		BCLR    S0RIR			; Clear receive flag
		RET
E192	ENDP

; Receive a byte in R7. R6: 0 if success, 1 if timeout.
E1A2	PROC NEAR
		MOV		[-R0],R1 ; Push R1
		MOV     R1,#0FFFFH ; Timeout to receive a byte
		MOV     R6,#00H ; Success => R6
E1AA:	SRVWDT  ; Feed watchdog
		JB      S0RIR,E1BA ; Jump if byte received
		CMPD1   R1,#00H
		JMPR    CC_NZ,E1AA ; Loop is not timeout
		MOV     R6,#01H ; Timeout => R6
		JMPR    CC_UC,E1C0
E1BA:	MOV     R7,S0RBUF ; Byte => R7
		BCLR    S0RIR ; Clear receive flag
E1C0:	JMPR    CC_UC,E156y ; Pop R1 + RET
E1A2	ENDP

; Dump EEPROM
E1C6	PROC NEAR
		BSET	DP2.8 ; P2.8 is an output
		BSET    P2.8 ; 1 => P2.8
		BSET    DP2.9 ; P2.9 is an output
		BSET    P2.9 ; 1 => P2.9
		CALL    Delay256
		CALL    Delay256
		CALL    E246 ; 11 01 00 - Start bit
		MOVB    RL7,#00ACH ; 1010 1100 (Dummy Write)
		CALL    E2AC ; Clock (P2.9) all bits of RL7 (MSB first) to P2.8
		CALL    E27A ; Clock (P2.9) one bit of P2.8 into R7.0
		MOVB    RL7,#00H ; Address 0
		CALL    E2AC ; Clock (P2.9) all bits of RL7 (MSB first) to P2.8
		CALL    E27A ; Clock (P2.9) one bit of P2.8 into R7.0
		CALL    E25C ; 0x 01 11
		CALL    E246 ; 11 01 00
		MOVB    RL7,#00ADH ; 1010 1101 (Read)
		CALL    E2AC ; Clock (P2.9) all bits of RL7 (MSB first) to P2.8
		CALL    E27A ; Clock (P2.9) one bit of P2.8 into R7.0
		MOV     R5,#00H
		MOV     R2,#01FEH ; Count = 512-2
E20A:	MOV     R5,#07H
E20C:	CALL    Delay256
		CMPD1   R5,#00H
		JMPR    CC_NZ,E20C
		CALL    E2C6 ; Clock (P2.9) 8 bits of P2.8 into RL7 (MSB first)
		CALL    E298 ; 0x 01 00
		CALL    XmitRL7
		CMPD1   R2,#00H
		JMPR    CC_NZ,E20A
		CALL    E2C6 ; Clock (P2.9) 8 bits of P2.8 into RL7 (MSB first)
		CALL    XmitRL7
		BSET    P2.9 ; 1 => P2.9
		BSET    P2.8 ; 1 => P2.8
		CALL    Delay7
		BCLR    P2.9 ; 0 => P2.9
		CALL    Delay7
		BCLR    P2.8 ; 0 => P2.8
		CALL    Delay7
		JMPR	CC_UC,E25C ; 0x 01 11
E1C6	ENDP

; 11 01 00
E246	PROC NEAR
		BSET    P2.8 ; 1 => P2.8
		BSET    P2.9 ; 1 => P2.9
		CALL	Delay7
		BCLR    P2.8 ; 0 => P2.8
		CALL    Delay7
		BCLR    P2.9 ; 0 => P2.9
		CALL    Delay7
		RET
E246	ENDP

; 0x 01 11
E25C	PROC NEAR
		BCLR    P2.8 ; 0 => P2.8
		CALL	Delay7
		BSET    P2.9 ; 1 => P2.9
		CALL    Delay7
		BSET    P2.8 ; 1 => P2.8
		RET
E25C	ENDP

; x1 x0
E26C	PROC NEAR
		CALL	Delay7
		BSET    P2.9 ; 1 => P2.9
		CALL	Delay7
		BCLR    P2.9 ; 0 => P2.9
		RET
E26C	ENDP

; Clock (P2.9) one bit of P2.8 into R7.0
E27A	PROC NEAR
		MOV		R7,#00H
		BCLR    DP2.8 ; P2.8 is an input
		CALL    Delay7
		BSET    P2.9 ; 1 => P2.9
		CALL    Delay7
		BMOV    R7.0,P2.8 ; P2.8 => R7.0
		BCLR    P2.9 ; 0 => P2.9
		CALL    Delay7
		BCLR    P2.8 ; 0 => P2.8
		BSET    DP2.8 ; P2.8 is an output
		RET
E27A	ENDP

; 0x 01 00
E298	PROC NEAR
		BCLR	P2.8 ; 0 => P2.8
		CALL    Delay7
		BSET    P2.9 ; 1 => P2.9
		CALL    Delay7
		BCLR    P2.9 ; 0 => P2.9
		CALL    Delay7
		RET
E298	ENDP

; Clock (P2.9) all bits of RL7 (MSB first) to P2.8
E2AC	PROC NEAR
		MOV  	[-R0],R1 ; Push R1
		MOV     R1,#07H ; Count = 7
		SHL     R7,#08H
E2B2:	SHL     R7,#01H
		BMOV    P2.8,C ; High bit of R7 => P2.8
		CALL    E26C ; x1 x0 (clock)
		CMPD1   R1,#00H ; Count-- == 0?
		JMPR    CC_NZ,E2B2 ; Repeat
		BCLR    P2.8 ; 0 => P2.8
		JMPR	CC_UC,PopR1
E2AC	ENDP

; Clock (P2.9) 8 bits of P2.8 into RL7 (MSB first)
E2C6	PROC NEAR
		MOV  	[-R0],R1 ; Push R1
		BCLR    DP2.8 ; P2.8 is an input
		MOV     R1,#07H ; Count = 7
		MOV     R7,#00H
E2CE:	BSET    P2.9 ; 1 => P2.9
		CALL    Delay7
		SHL     R7,#01H
		BMOV    R7.0,P2.8 ; P2.8 => Low bit of R7
		BCLR    P2.9 ; 0 => P2.9
		CALL    Delay7
		CMPD1   R1,#00H ; Count-- == 0?
		JMPR    CC_NZ,E2CE ; Repeat
		BSET    DP2.8 ; P2.8 is an output
		BCLR    P2.8 ; 0 => P2.8
		JMPR	CC_UC,PopR1
E2C6	ENDP

Delay256	PROC NEAR
		MOV  	[-R0],R3 ; Push R3
		MOV     R3,#0100H
		JMPR    CC_UC,DelayLoop
Delay256	ENDP

Delay7	PROC NEAR
		MOV  	[-R0],R3 ; Push R3
		MOV     R3,#7
DelayLoop:
		SRVWDT  ; Feed watchdog
		SUB     R3,#1
		CMP     R3,#00H
		JMPR    CC_NZ,DelayLoop
		MOV     R3,[R0+] ; Pop R3
		RET
Delay7	ENDP

; Write 1 byte to EEPROM (Page 0)
E324	PROC NEAR
E324x:
		CALL	E246 ; 11 01 00 - Start bit
		MOV     R7,#00ACH ; 1010 1100 (Write)
		CALL	E2AC ; Clock (P2.9) all bits of RL7 (MSB first) to P2.8
		CALL    E27A ; Clock (P2.9) one bit of P2.8 into R7.0
		CMP     R7,#0
		JMPR    CC_NZ,E324x
		JMPR	CC_UC,E356y
E324	ENDP

; Write 1 byte to EEPROM (Page 1)
E356	PROC NEAR
E356x:
		CALL	E246 ; 11 01 00 - Start bit
		MOV     R7,#00AEH ; 1010 1110
		CALL    E2AC ; Clock (P2.9) all bits of RL7 (MSB first) to P2.8
		CALL    E27A ; Clock (P2.9) one bit of P2.8 into R7.0
		CMP     R7,#0
		JMPR    CC_NZ,E356x
E356y:
		CALL    E192 ; Receive a byte in R7
		CALL    E2AC ; Clock (P2.9) all bits of RL7 (MSB first) to P2.8
		CALL    E27A ; Clock (P2.9) one bit of P2.8 into R7.0
		CALL    E192 ; Receive a byte in R7
		CALL    E2AC ; Clock (P2.9) all bits of RL7 (MSB first) to P2.8
		CALL    E27A ; Clock (P2.9) one bit of P2.8 into R7.0
		JMPR	CC_UC,E25C ; 0x 01 11
E356	ENDP
	
; Program flash
E1C4	PROC NEAR
		MOV     [-R0],R1 ; Push R1
		MOV     [-R0],R2 ; Push R2
		MOV     [-R0],R3 ; Push R3
		MOV     [-R0],R4 ; Push R4
		MOV     R3,#0E600H ; Buf
		MOV     R2,#00H
		MOVB    RL2,[R3+#0002H] ; Address high
		MOVB    RH1,[R3+#0003H] ; Address medium
		MOVB    RL1,[R3+#0004H] ; Address low
		MOV     R4,#00H
		MOVB    RL4,[R3] ; Count
		SUB     R4,#4
		SHR     R4,#01H
		SUB     R4,#1
		ADD     R3,#5
E1EA:	SRVWDT  ; Feed watchdog
		MOVB    RL7,[R3+]
		MOVB    RH7,[R3+]
		CALL    E208 ; Program flash (R1: Address, R7: Data)
		ADD     R1,#2
		ADDC    R2,#0
		CMPD1   R4,#00H
		JMPR    CC_NZ,E1EA
PopR4:	MOV     R4,[R0+] ; Pop R4
PopR3:	MOV     R3,[R0+] ; Pop R3
PopR2:	MOV     R2,[R0+] ; Pop R2
PopR1:	MOV     R1,[R0+] ; Pop R1
		RET
E1C4	ENDP

; Program flash (R1: Address, R7: Data)
E208	PROC NEAR
		MOV     [-R0],R1 ; Push R1
		MOV     [-R0],R7 ; Push R7
		MOV     R1,#0AAAAH ; Address AAA
		MOVB    RL7,#00AAH ; Data AA
		CALL    E374 ; Write extended data byte (source is RL7)
		MOV     R1,#5555H ; Address 555
		MOVB    RL7,#0055H ; Data 55
		CALL    E374 ; Write extended data byte (source is RL7)
		MOV     R1,#0AAAAH ; Address AAA
		MOVB    RL7,#00A0H ; Data A0
		CALL    E374 ; Write extended data byte (source is RL7)
		MOV     R7,[R0+] ; Pop R7
		MOV     R1,[R0+] ; Pop R1
		CALL    E384 ; Write extended data word (source is R7)
		CALL    E354 ; Wait until operation is complete
		RET
E208	ENDP

; Read flash
E23E	PROC NEAR
		MOV     [-R0],R1 ; Push R1
		MOV     [-R0],R2 ; Push R2
		MOV     [-R0],R3 ; Push R3
		MOV     [-R0],R4 ; Push R4
		MOV     [-R0],R5 ; Push R5
		MOV     R3,#0E600H ; Buf
		MOV     R2,#00H
		MOVB    RL2,[R3+#0002H] ; Address high
		MOVB    RH1,[R3+#0003H] ; Address medium
		MOVB    RL1,[R3+#0004H] ; Address low
		MOV     R4,#00H
		MOVB    RL4,[R3+#0005H] ; Count
		ADDB    RL4,#1
		MOVB    [R3],RL4
		ADD     R3,#1
		MOVB    RL7,#0036H
		MOVB    [R3],RL7
		ADD     R3,#1
		SUBB    RL4,#1
E270:	CALL    E290 ; Read extended data (returned in RL7)
		MOVB    [R3],RL7
		ADD     R3,#1
		ADD     R1,#1
		ADDC    R2,#0
		CMPD1   R4,#00H
		JMPR    CC_NZ,E270
		CALL    E15E ; Send message in buf (E600)
		MOV     R5,[R0+] ; Pop R5
		JMPR	CC_UC,PopR4
E23E	ENDP

; Read extended data (returned in RL7)
E290	PROC NEAR
		MOV     [-R0],R1 ; Push R1
		SRVWDT  ; Feed watchdog
		CALL    E2A4 ; Set Data Page Pointer 0 based on R2
		AND     R1,#3FFFH
		MOVB    RL7,[R1]
		JMPR	CC_UC,PopR1
E290	ENDP

; Set Data Page Pointer 0 based on R1, R2
E2A4	PROC NEAR
		MOV     [-R0],R1 ; Push R1
		MOV     [-R0],R2 ; Push R2
		SHL     R2,#02H
		AND     R2,#00FCH
		ROL     R1,#02H
		AND     R1,#3
		OR      R2,R1
		MOV     DPP0,R2 ; R2 => Data Page Pointer 0
		JMPR	CC_UC,PopR2
E2A4	ENDP

; Erase flash
E2E6	PROC NEAR
		MOV     [-R0],R1 ; Push R1
		MOV     [-R0],R2 ; Push R2
		MOV     [-R0],R3 ; Push R3
		MOV     [-R0],R7 ; Push R7
		MOV     R3,#0E600H ; Buf
		MOV     R2,#0020H
		MOV     R1,#0AAAAH ; Address AAA
		MOVB    RL7,#00AAH ; Data AA
		CALL    E374 ; Write extended data byte (source is RL7)
		MOV     R1,#5555H ; Address 555
		MOVB    RL7,#0055H ; Data 55
		CALL    E374 ; Write extended data byte (source is RL7)
		MOV     R1,#0AAAAH ; Address AAA
		MOVB    RL7,#0080H ; Data 80
		CALL    E374 ; Write extended data byte (source is RL7)
		MOV     R1,#0AAAAH ; Address AAA
		MOVB    RL7,#00AAH ; Data AA
		CALL    E374 ; Write extended data byte (source is RL7)
		MOV     R1,#5555H ; Address 555
		MOVB    RL7,#0055H ; Data 55
		CALL    E374 ; Write extended data byte (source is RL7)
		MOV     R1,#0AAAAH ; Address AAA
		MOVB    RL7,#0010H ; Data 10
		CALL    E374 ; Write extended data byte (source is RL7)
		CALL    Delay256
		MOVB    RL7,#0080H
		CALL    E354 ; Wait until erase operation is complete
		MOV     R7,[R0+] ; Pop R7
		JMPR	CC_UC,PopR3
E2E6	ENDP
	
; Wait until operation is complete
E354	PROC NEAR
		MOV     [-R0],R2 ; Push R2
		MOV     [-R0],R7 ; Push R7
		SUB     R2,#0018H
		MOVB    RH7,RL7
		ANDB    RH7,#0080H
E362:	CALL    E290 ; Read extended data (returned in RL7)
		ANDB    RL7,#0080H
		CMPB    RL7,RH7
		JMPR    CC_NZ,E362
		MOV     R7,[R0+] ; Pop R7
		MOV     R2,[R0+] ; Pop R2
		RET
E354	ENDP

; Write extended data byte (source is RL7)
E374	PROC NEAR
		MOV     [-R0],R1 ; Push R1
		CALL    E2A4 ; Set Data Page Pointer 0 based on R2
		AND     R1,#3FFFH
		MOVB    [R1],RL7
		JMPR	CC_UC,E384x ; Pop R1 + RET
E374	ENDP
	
; Write extended data word (source is R7)
E384	PROC NEAR
		MOV     [-R0],R1 ; Push R1
		CALL    E2A4 ; Set Data Page Pointer 0 based on R2
		AND     R1,#3FFFH
		MOV     [R1],R7
E384x:	MOV     R1,[R0+] ; Pop R1
		RET
E384	ENDP

RoutineEnd:

All		ENDS

END
